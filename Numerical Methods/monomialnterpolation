using System;

namespace Interpolation
{
    class Program
    {
        public static double []GaussJordanMethod(double [][] arrayDelivered, int n)
        {
            double[] result = new double[n];
            for (int k = 0; k < n; k++)
            {
                double Max = arrayDelivered[k][k];
                int r = k;
                for (int i = k; i < n; i++)
                {
                    if (Math.Abs(arrayDelivered[i][k]) > Math.Abs(Max))
                    {
                        Max = arrayDelivered[i][k];
                        r = i;
                    }
                }

                if (Max == 0)
                {
                    Console.WriteLine("Singular Matrix");
                    return result;
                }

                for (int j = k; j < n + 1; j++)
                {
                    (arrayDelivered[k][j], arrayDelivered[r][j]) = (arrayDelivered[r][j], arrayDelivered[k][j]);
                    arrayDelivered[k][j] = arrayDelivered[k][j] / Max;
                }

                for (int i = 0; i < n; i++)
                {
                    if (i != k)
                    {
                        double p = arrayDelivered[i][k];
                        for (int j = k; j < n + 1; j++)
                        {
                            arrayDelivered[i][j] = arrayDelivered[i][j] - p * arrayDelivered[k][j];
                        }
                    }
                }
            }
            for (int i = 0; i < n; i++)
            {
                result[i] = arrayDelivered[i][n];
            }
            return result;
        }

        public static double[][] CreateArray(double[,] arrayDoubles,int n)
        {
            double[][] arrayDelivered = new double[n + 1][];
            for (int i = 0; i < n + 1; i++)
            {
                arrayDelivered[i] = new double[n + 2];
            }

            for (int i = 0; i < n + 1; i++)
            {
                for (int j = 0; j < n + 1; j++)
                {
                    arrayDelivered[i][j] = Math.Pow(arrayDoubles[i, 0], j);
                    arrayDelivered[i][j + 1] = arrayDoubles[i, 1];
                }
            }

            return arrayDelivered;
        }
        static void Main(string[] args)
        {
            //double[,] array = { { 1.5, 2 }, { 2, 5 }, { 2.5, -1 }, { 3.5, 0.5 }, { 3.8, 3 }, { 4.1, 7 } };
            double[,] array = { {-2,7},{-0.5,5},{1.2,1},{3,-0.5},{3.5,2},{5,1},{5.5,-1}};
            double[][] arrayDelivered = CreateArray(array, 6);
            int n = 7;
            double [] arrayResult = GaussJordanMethod(arrayDelivered, n);

           
            while (true)
            {
                Console.WriteLine("X: ");
                var x = Console.ReadLine();
                double result = 0;
                int i = 0;
                foreach (var variable in arrayResult)
                {
                    result += variable * Math.Pow(Convert.ToDouble(x), i);
                    i++;
                }

                result = Math.Round(result, 4);
                Console.WriteLine($"The result for x: {x} is {result}");
            }
        }
    }
}
